// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package book

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BookStreamServiceClient is the client API for BookStreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookStreamServiceClient interface {
	FetchResponse(ctx context.Context, in *Request, opts ...grpc.CallOption) (BookStreamService_FetchResponseClient, error)
}

type bookStreamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBookStreamServiceClient(cc grpc.ClientConnInterface) BookStreamServiceClient {
	return &bookStreamServiceClient{cc}
}

func (c *bookStreamServiceClient) FetchResponse(ctx context.Context, in *Request, opts ...grpc.CallOption) (BookStreamService_FetchResponseClient, error) {
	stream, err := c.cc.NewStream(ctx, &BookStreamService_ServiceDesc.Streams[0], "/BookStreamService/FetchResponse", opts...)
	if err != nil {
		return nil, err
	}
	x := &bookStreamServiceFetchResponseClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BookStreamService_FetchResponseClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type bookStreamServiceFetchResponseClient struct {
	grpc.ClientStream
}

func (x *bookStreamServiceFetchResponseClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BookStreamServiceServer is the server API for BookStreamService service.
// All implementations must embed UnimplementedBookStreamServiceServer
// for forward compatibility
type BookStreamServiceServer interface {
	FetchResponse(*Request, BookStreamService_FetchResponseServer) error
	mustEmbedUnimplementedBookStreamServiceServer()
}

// UnimplementedBookStreamServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBookStreamServiceServer struct {
}

func (UnimplementedBookStreamServiceServer) FetchResponse(*Request, BookStreamService_FetchResponseServer) error {
	return status.Errorf(codes.Unimplemented, "method FetchResponse not implemented")
}
func (UnimplementedBookStreamServiceServer) mustEmbedUnimplementedBookStreamServiceServer() {}

// UnsafeBookStreamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookStreamServiceServer will
// result in compilation errors.
type UnsafeBookStreamServiceServer interface {
	mustEmbedUnimplementedBookStreamServiceServer()
}

func RegisterBookStreamServiceServer(s grpc.ServiceRegistrar, srv BookStreamServiceServer) {
	s.RegisterService(&BookStreamService_ServiceDesc, srv)
}

func _BookStreamService_FetchResponse_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BookStreamServiceServer).FetchResponse(m, &bookStreamServiceFetchResponseServer{stream})
}

type BookStreamService_FetchResponseServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type bookStreamServiceFetchResponseServer struct {
	grpc.ServerStream
}

func (x *bookStreamServiceFetchResponseServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

// BookStreamService_ServiceDesc is the grpc.ServiceDesc for BookStreamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookStreamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BookStreamService",
	HandlerType: (*BookStreamServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FetchResponse",
			Handler:       _BookStreamService_FetchResponse_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "book/book.proto",
}
